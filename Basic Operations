#1 Concatenate two strings, one with your first name and one with your last, to create a new string with your full name as its value:

print ("Tyler" + " " + "Landes")

#2 Use the REPL and the arithmetic operators to extract the individual digits of 4936:

>>> number = 4936

>>> ones = number % 10
>>> ones = 6

>>> number = number // 10
493

>>> tens = number % 10
>>> tens = 3

>>> number = number // 10
49

>>> hundreds = number % 10
>>> hundreds = 9

>>> thousands = number // 10
>>> thousands = 4

#3 What does the following code do? Why?

print('5' + '10')

This code displays 510 because we are combining two strings to create a new
string. If we were using integers instead, the code would display 15.

#4 Refactor the above code to use coercion to print 15 instead:

print(int('5') + int('10'))

#5 Will an error occur if you try access a list element with a greater index than
the list's length?

Yes, we will recieve an 'out of range' error.

#6 To what value does the following expression evaluate: 'foo' = 'Foo'

This will be return False because of case senstivity.

#7 What will the following code do? Why? int('3.1415')

This will display a ValueError because the string value is not an integer.

#8 What value does the following expression evaluate? '12' < '9'

This would display True because we are using strings instead of numbers.
